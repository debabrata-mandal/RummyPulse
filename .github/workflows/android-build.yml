name: Android Build and Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Setup google-services.json for CI
      run: echo '${{ secrets.GOOGLE_SERVICES_JSON }}' > app/google-services.json

    - name: Generate release keystore for CI
      run: |
        keytool -genkey -v -keystore app/release.keystore -alias rummypulse-release -keyalg RSA -keysize 2048 -validity 10000 -storepass rummypulse123 -keypass rummypulse123 -dname "CN=RummyPulse Release,O=RummyPulse,C=US"

    - name: Build with Gradle
      run: ./gradlew assembleRelease

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: app-release
        path: app/build/outputs/apk/release/app-release.apk

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download APK artifact
      uses: actions/download-artifact@v4
      with:
        name: app-release
        path: ./apk

    - name: Determine Version
      id: version
      run: |
        # Fetch all tags and get the latest semantic version tag
        git fetch --tags
        latest_tag=$(git tag -l | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n1 || echo "v0.0.0")
        echo "Latest tag: $latest_tag"
        
        # Extract version numbers
        version=$(echo $latest_tag | sed 's/v//')
        major=$(echo $version | cut -d. -f1)
        minor=$(echo $version | cut -d. -f2)
        patch=$(echo $version | cut -d. -f3)
        
        # Get commit message (first line only to avoid multiline issues)
        commit_msg=$(echo "${{ github.event.head_commit.message }}" | head -n1 | tr -d '\n\r')
        echo "Commit message: $commit_msg"
        
        # Determine version bump based on commit message
        if [[ $commit_msg =~ ^(feat|feature)(\(.+\))?: ]]; then
          echo "Minor version bump (feature)"
          minor=$((minor + 1))
          patch=0
        elif [[ $commit_msg =~ ^(fix|bugfix|hotfix)(\(.+\))?: ]]; then
          echo "Patch version bump (fix)"
          patch=$((patch + 1))
        elif [[ $commit_msg =~ ^(chore|docs|style|refactor|perf|test)(\(.+\))?: ]]; then
          echo "Build number bump (chore)"
          patch=$((patch + 1))
        elif [[ $commit_msg =~ ^(BREAKING CHANGE|!): ]]; then
          echo "Major version bump (breaking change)"
          major=$((major + 1))
          minor=0
          patch=0
        else
          echo "Default patch version bump"
          patch=$((patch + 1))
        fi
        
        new_version="$major.$minor.$patch"
        new_tag="v$new_version"
        echo "New version: $new_version"
        echo "New tag: $new_tag"
        
        # Check if tag already exists
        if git tag -l | grep -q "^$new_tag$"; then
          echo "⚠️  Tag $new_tag already exists! Force incrementing patch version."
          patch=$((patch + 1))
          new_version="$major.$minor.$patch"
          new_tag="v$new_version"
          echo "Updated version: $new_version"
          echo "Updated tag: $new_tag"
        fi
        
        # Set outputs
        echo "version=$new_version" >> $GITHUB_OUTPUT
        echo "tag=$new_tag" >> $GITHUB_OUTPUT
        echo "major=$major" >> $GITHUB_OUTPUT
        echo "minor=$minor" >> $GITHUB_OUTPUT
        echo "patch=$patch" >> $GITHUB_OUTPUT

    - name: Update Version in build.gradle.kts
      run: |
        # Update versionName in build.gradle.kts
        sed -i "s/versionName = \".*\"/versionName = \"${{ steps.version.outputs.version }}\"/" app/build.gradle.kts
        
        # Update versionCode (increment by 1)
        current_code=$(grep "versionCode = " app/build.gradle.kts | sed 's/.*versionCode = //')
        new_code=$((current_code + 1))
        sed -i "s/versionCode = .*/versionCode = $new_code/" app/build.gradle.kts
        
        echo "Updated versionName to ${{ steps.version.outputs.version }}"
        echo "Updated versionCode to $new_code"

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        name: RummyPulse ${{ steps.version.outputs.tag }}
        body: |
          ## RummyPulse Android App
          
          **Version:** ${{ steps.version.outputs.tag }}
          **Build Number:** ${{ github.run_number }}
          **Commit:** ${{ github.sha }}
          **Date:** ${{ github.event.head_commit.timestamp }}
          
          ### Installation Instructions
          1. Download the APK file below
          2. Enable "Install from unknown sources" in your Android device settings
          3. Install the APK on your device
          
          ### Changes
          ${{ github.event.head_commit.message }}
        files: ./apk/app-release.apk
        draft: false
        prerelease: false
        make_latest: true
        fail_on_unmatched_files: true
        token: ${{ secrets.GITHUB_TOKEN }}
